#! /usr/bin/env ruby
$:.unshift(File.expand_path('../../lib', __FILE__)) if $0 == __FILE__
require 'getopt/std'
require 'indentinator'
include Indentinator

def parse_amount(val)
  return nil if val.nil?
  if val.to_i.to_s == val # is a number
    ' ' * val.to_i
  elsif val.downcase == 'tab'
    "\t"
  end
end

opts = Getopt::Std.getopts('ic:a:vVr')
@from_stdin = opts['i']
@amount = parse_amount(opts['a'])
@to_amount = parse_amount(opts['c'])
@very_verbose = opts['V']
@verbose = opts['v'] || @very_verbose
@replace = opts['r'] && !@from_stdin
@files = ARGV

if @files.size == 0 and not @from_stdin
  puts "Usage: 
  
  indentinator [-c INDENT_AMOUNT] <file> [<file2>...]
  
Options:
  
  -c INDENT_AMOUNT
        Modify the indentation amount to INDENT_AMOUNT. The value is either
  	    a number - in which case it indicates the number of spaces to use; 
  	    or TAB - which indicates to use tabs.
    
  -a AMOUNT
        Tell me the original AMOUNT of indentation to use 
        when converting the file's indentation. 
        Normally, this value is inferred by looking at the input.
  	    This option takes the same values as -c.
    
  -i    Read input from stdin. This will ignore any file arguments.
    
  -r    Replace the original file. Please back up your file or make sure you
        are using version control. Indentinator is not responsible for
        any damages; it just indents.
    
  -v    Verbose output

  -V    Very verbose output
  
"
  exit(0)
end

def process_input(text, path)
  lines = text.split("\n")
  if @to_amount.nil? or @amount.nil?
    @amount = indent_amount(lines)
  end
  if @to_amount.nil?
    if @amount == ''
      puts "#{path} has no indentation."
    elsif @amount.match(/^ *$/)
      puts "#{path} uses #{@amount.size} spaces."
    elsif @amount == "\t"
      puts "#{path} uses tabs."
    else
      puts "#{path} uses #{@amount.gsub(' ', 'SPACE ').gsub("\t", 'TAB ').strip}. WTF?"
    end
  else
    output = convert_lines(lines, @amount, @to_amount).join("\n")
    if @replace
      write_file(path, output)
    else
      puts output
    end
  end
end

def read_file(path)
  f = open(path, 'r')
  text = f.read
  f.close
  text
end

def write_file(path, text)
  f = open(path, 'w')
  f.write(text)
  f.close
end

if @from_stdin
  process_file(STDIN, 'Input')
else
  @files.each do |path|
    begin
      if File.directory?(path)
        puts "#{path} is a directory."
        next
      end
      text = read_file(path)
      process_input(text, path)
    rescue Errno::ENOENT
      puts "Can't open #{path}"
    rescue ArgumentError
      puts "Failed for #{path}. Is it binary?"
    end
  end
end