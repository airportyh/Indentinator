#! /usr/bin/env ruby
require 'getopt/std'
require 'indentinator'
include Indentinator

opts = Getopt::Std.getopts('c:a:vV')
@amount = opts['a'].to_i
@to_amount = opts['c'].to_i
@very_verbose = opts['V']
@verbose = opts['v'] or @very_verbose
@files = ARGV
if @files.size == 0
  puts "Usage: 
  
  indentinator [-c INDENT_AMOUNT] <file> [<file2>...]
  
Options:
  
  -c INDENT_AMOUNT
        Modify the indentation amount to INDENT_AMOUNT
        
  -a AMOUNT
        Force the original amount of indentation to be interpreted as 
        AMOUNT when converting the file's indentation. 
        Normally, this value is inferred by looking at the file.
        
  -v    Verbose output
  -V    Very verbose output
  
"
  exit(0)
end

@files.each do |path|
  begin
    if File.directory?(path)
      puts "#{path} is a directory."
      next
    end
    File.open(path) do |file|
      lines = file.read.split("\n")
      if @to_amount.nil? or @amount.nil?
        @amount = indent_amount(lines)
      end
      if @to_amount.nil?
        if @amount == 0
          puts "#{path} has no indentation."
        else
          puts "#{path} uses #{@amount} spaces."
        end
      else
        puts convert_lines(lines, @amount, @to_amount).join("\n")
      end
    end
  rescue Errno::ENOENT
    puts "Can't open #{path}"
  rescue ArgumentError
    puts "Failed for #{path}. Is it binary?"
  end
end